load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_library")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@pip//:requirements.bzl", "requirement")
load("//:py_image_layer.bzl", "py_image_layer")

py_library(
    name = "hello_world_lib",
    srcs = [
        "__init__.py",
        "app.py",
    ],
    imports = [".."],
    visibility = ["//:__subpackages__"],
)

py_binary(
    name = "hello_world",
    srcs = ["__main__.py"],
    imports = [".."],
    main = "__main__.py",
    visibility = ["//:__subpackages__"],
    deps = [
        ":hello_world_lib",
        requirement("cowsay"),
        requirement("bazel-runfiles"),
    ],
)

py_image_layer(
    name = "hello_world_layer",
    binary = ":hello_world",
    root = "/opt",
)

oci_image(
    name = "image",
    base = "@python_base",
    entrypoint = ["/opt/hello_world/hello_world"],
    tars = [":hello_world_layer"],
)

platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform_transition_filegroup(
    name = "platform_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":aarch64_linux",
        "@platforms//cpu:x86_64": ":x86_64_linux",
    }),
)

# $ bazel run //hello_world:tarball
# $ docker run --rm gcr.io/oci_python_hello_world:latest
oci_tarball(
    name = "tarball",
    image = ":platform_image",
    repo_tags = ["gcr.io/oci_python_hello_world:latest"],
)

container_structure_test(
    name = "test",
    configs = ["test.yaml"],
    image = ":platform_image",
)
